require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::V1::VersionsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Version. As you add validations to Version, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      article_id: 1,
      version: 0,
      html_text: '1',
      plain_text: '1'
    }
  end

  let(:invalid_attributes) do
    {
      article_id: nil,
      version: 0,
      html_text: '1',
      plain_text: '1'
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # VersionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'assigns all versions as @versions' do
      version = Version.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:versions)).to eq([version])
    end
  end

  describe 'GET #show' do
    it 'assigns the requested version as @version' do
      version = Version.create! valid_attributes
      get :show, params: { id: version.to_param }, session: valid_session
      expect(assigns(:version)).to eq(version)
    end
  end
end
